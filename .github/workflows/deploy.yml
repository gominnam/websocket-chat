name: Deploy to AWS EC2

on:
  push:
    branches:
      - https

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build Spring Boot application
        run: |
          ./gradlew clean build -x test
          ls -l build/libs/
          pwd

      - name: Build Docker image
        run: |
          docker build -t boosterko/websocket-chat:${{ github.sha }} .
          docker build -t boosterko/websocket-chat-nginx:${{ github.sha }} ./nginx
          docker images

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push boosterko/websocket-chat:${{ github.sha }}
          docker push boosterko/websocket-chat-nginx:${{ github.sha }}

      - name: Ensure target directory exists on AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_USER_NAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          script: |
            mkdir -p /home/ec2-user/app/config

      - name: Copy docker-compose file to AWS EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_USER_NAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          source: "./docker-compose.yml"
          target: "/home/ec2-user/app/config"
          overwrite: true

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_USER_NAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          script: |
            # Identify the container using 8080 port
            CONTAINER_ID=$(docker ps --filter "publish=8080" -q)

            # Stop and remove the container if exists
            if [ ! -z "$CONTAINER_ID" ]; then
              echo "Stopping and removing container $CONTAINER_ID"
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
            else
              echo "No container is using port 8080"
            fi
          
            # move to docker-compose file directory
            cd /home/ec2-user/app/config
            
            # Set environment variables and run docker-compose
            export GITHUB_SHA=${{ github.sha }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            export GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            docker-compose down || true
            docker-compose pull
            docker-compose up -d --force-recreate
            
            # Clean up Docker images
            docker image prune -a -f --filter "until=4h"
